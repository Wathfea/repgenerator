<template>
    <div class="px-4 sm:px-6 lg:px-8">
        <div class="sm:flex sm:items-center">
            <div class="sm:flex-auto">
                <h1 class="text-xl font-semibold text-gray-900">{{modelNamePlural}}</h1>
            </div>
            <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
                <button type="button" v-on:click="add{{modelNameSingular}}" class="inline-flex items-center justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 sm:w-auto">Add {{modelNamePlural}}</button>
            </div>
        </div>
        <div class="mt-8 flex flex-col">
            <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
                <div class="inline-block min-w-full py-2 align-middle">
                    <div class="overflow-hidden shadow-sm ring-1 ring-black ring-opacity-5">
                        <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="search-input">
                            Search
                        </label>
                        <input v-model="searchInput" v-on:keyup="getSearch(searchInput, perPage)" class="appearance-none block w-full bg-gray-200 text-gray-700 border border-red-500 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white" id="search-input" type="text" placeholder="Search ...">

                        <table class="min-w-full divide-y divide-gray-300">
                            <thead class="bg-gray-50">
                            <tr>
                                <th v-for="(column,key) in columns" scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">
                                    {{ key }}
                                </th>
                                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6 lg:pr-8">
                                    <span class="sr-only">Edit</span>
                                </th>
                            </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200 bg-white">
                            <tr v-for="model in {{modelNamePluralLowerCase}}" :key="model.id">
                                <td v-for="(column,key) in columns" class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                                    {{ model[column] }}
                                </td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6 lg:pr-8">
                                    <a href="#" @click.prevent="edit{{modelNameSingular}}(model.id)" class="text-indigo-600 hover:text-indigo-900">
                                        Edit
                                    </a>
                                    <a href="#" @click.prevent="delete{{modelNameSingular}}(model.id)" class="text-indigo-600 hover:text-indigo-900">
                                        Delete
                                    </a>
                                </td>
                            </tr>
                            </tbody>
                        </table>
                        <nav class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6" aria-label="Pagination">
                            <div class="hidden sm:block">
                                <p class="text-sm text-gray-700">
                                    Showing
                                    {{ ' ' }}
                                    <span class="font-medium">{{ meta.from }}</span>
                                    {{ ' ' }}
                                    to
                                    {{ ' ' }}
                                    <span class="font-medium">{{ meta.to  }}</span>
                                    {{ ' ' }}
                                    of
                                    {{ ' ' }}
                                    <span class="font-medium">{{ meta.total }}</span>
                                    {{ ' ' }}
                                    results
                                </p>
                            </div>
                            <div class="flex-1 flex justify-between sm:justify-end">
                                <button type="button" :disabled="meta.current_page <= 1" @click="prevPage" class="disabled:opacity-50 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"> Previous </button>
                                <button type="button" :disabled="meta.current_page === meta.last_page" @click="nextPage" class="disabled:opacity-50 ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"> Next </button>
                            </div>
                        </nav>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-8 flex flex-col" v-if="showAddForm">
            <Create{{modelNameSingular}} />
        </div>

        <div class="mt-8 flex flex-col" v-if="showEditForm">
            <Edit{{modelNameSingular}} :id="{{modelNameSingularLowerCase}}.id"/>
        </div>
    </div>
</template>

<script setup>
import use{{modelNamePlural}} from './{{modelNameSingularLowerCase}}.js'
import Create{{modelNameSingular}} from './create.vue'
import Edit{{modelNameSingular}} from './edit.vue'
import { reactive, ref } from 'vue';

const columns = {{modelColumns}}
const currentPage = ref(1);
const perPage = 10;

let searchInput = ref("");
let showAddForm = ref(false);
let showEditForm = ref(false);
let {{modelNameSingularLowerCase}} = reactive({
    id: 0,
})

const { {{modelNamePluralLowerCase}}, meta, get{{modelNamePlural}}, getSearch, destroy{{modelNameSingular}} } = use{{modelNamePlural}}()

const prevPage = () => {
    get{{modelNamePlural}}(--currentPage.value, perPage);
}

const nextPage = () => {
    get{{modelNamePlural}}(++currentPage.value, perPage);
}

const delete{{modelNameSingular}} = async (id) => {
            if (!window.confirm('You sure?')) {
                return
            }

            await destroy{{modelNameSingular}}(id)
            await get{{modelNamePlural}}(1, perPage)
        }

const edit{{modelNameSingular}} = (id) => {
    //If add form is active hide it
    if(showAddForm.value) showAddForm.value = !showAddForm.value;
    showEditForm.value = true;
    {{modelNameSingularLowerCase}}.id = id;
}

const add{{modelNameSingular}} = () => {
    //If add form is active hide it
    if(showEditForm.value) showEditForm.value = !showEditForm.value;
    showAddForm.value = true;
}

get{{modelNamePlural}}(1, perPage)
</script>
