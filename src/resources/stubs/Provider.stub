<?php

namespace App\Domain\{{modelName}}\Providers;

use App\Domain\{{modelName}}\Filters\{{modelName}}Filter;
use App\Domain\{{modelName}}\Requests\{{modelName}}Request;
use App\Domain\{{modelName}}\Requests\{{modelName}}UpdateRequest;
use App\Domain\{{modelName}}\Services\{{modelName}}Service;
use App\Domain\{{modelName}}\Repositories\{{modelName}}RepositoryService;
use App\Domain\{{modelName}}\Controllers\Api\v1\{{modelName}}ApiController;
use App\Domain\{{modelName}}\Models\{{modelName}};
use App\Domain\{{modelName}}\Resources\{{modelName}}Resource;
use Illuminate\Contracts\Foundation\Application;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;

/**
 * Class {{modelName}}ServiceProvider.
 */
class {{modelName}}ServiceProvider extends ServiceProvider
{
    /**
     * The controller namespace for the application.
     *
     * @var string|null
     */
     protected $namespace = 'App\\Domain\\{{modelName}}\\Controllers\\Api\\v1';

    /**
     * @return void
     */
    public function register()
    {
        $this->app->bind({{modelName}}Filter::class, function (Application $application, array $data) {
            return (new {{modelName}}Filter(request()->merge($data)))
                ->setSearchableColumns([{{searchables}}]);
        });

        $this->app->singleton({{modelName}}RepositoryService::class, function () {
            return (new {{modelName}}RepositoryService({{repoParams}}))
                {{serviceSetters}};
        });

        $this->app->singleton({{modelName}}Service::class, function () {
            return (new {{modelName}}Service(app({{modelName}}RepositoryService::class)));
        });

        $this->app->singleton({{modelName}}ApiController::class, function () {
            return (new {{modelName}}ApiController(app({{modelName}}Service::class)))
                ->setStoreRequest({{modelName}}Request::class)
                ->setUpdateRequest({{modelName}}UpdateRequest::class)
                ->setResourceClass({{modelName}}Resource::class)
                ->setFilterClass({{modelName}}Filter::class)
                ->setRelations([{{relations}}]);
        });

        $this->app->register({{modelName}}EventServiceProvider::class);
    }

    /**
     * Bootstrap services.
     *
     * @return void
     */
    public function boot()
    {
        $this->loadRoutesFrom(__DIR__.'/../Routes/api.php');
    }
}
